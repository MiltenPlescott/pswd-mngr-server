/*
 * pswd-mngr-server
 *
 * Copyright (c) 2020, Milten Plescott. All rights reserved.
 *
 * SPDX-License-Identifier: MIT
 */

plugins {
    id 'java'
    id 'war'
    //id 'application' // replace with 'base' after setting up the server
    id 'pmd'
    id 'jacoco'
    //    id 'com.github.spotbugs' version '4.2.3' // **spotbugs
    id 'net.ltgt.errorprone' version '1.2.1'
    id 'com.dorongold.task-tree' version '1.5'
}

project.ext.setProperty('payaraHome', System.getenv('PAYARA_HOME') ?: project.findProperty('payaraHome'))
project.ext.setProperty('asadminDir', "${payaraHome}${File.separator}bin")
project.ext.setProperty('asadminFile', System.properties['os.name'].toLowerCase().contains('windows') ? ['cmd', '/c', 'asadmin.bat'] : './asadmin')
project.ext.setProperty('h2jar', "${payaraHome}${File.separator}h2db${File.separator}bin${File.separator}h2.jar")

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compileOnly 'com.google.errorprone:error_prone_core:2.4.0'
    testCompileOnly 'com.google.errorprone:error_prone_core:2.4.0'
    annotationProcessor 'com.google.errorprone:error_prone_core:2.4.0'

    providedCompile 'javax:javaee-web-api:8.0.1'
    compileOnly 'javax:javaee-web-api:8.0.1:javadoc'
    // providedCompile 'fish.payara.distributions:payara-web:5.2020.3'

    // JPA - API
    // artifact 'org.eclipse.persistence:javax.persistence:2.2.0' included in java 'javax:javaee-web-api:8.0.1'
    //
    // JPA - RI
    providedCompile 'org.eclipse.persistence:org.eclipse.persistence.jpa:2.7.6' // aka eclipselink

    // Validation - API
    // artifact 'javax.validation:validation-api:2.0.0.Final' included in java 'javax:javaee-web-api:8.0.1'
    //
    // Validation - RI
    providedCompile 'org.hibernate.validator:hibernate-validator:6.1.2.Final'
    testImplementation 'org.hibernate.validator:hibernate-validator:6.1.2.Final'
    //
    // Validation - Annotation Processor
    compileOnly 'org.hibernate.validator:hibernate-validator-annotation-processor:6.1.2.Final'
    // annotationProcessor 'org.hibernate.validator:hibernate-validator-annotation-processor:6.1.2.Final' // error-prone error
    //
    // Validation - EL (Expression Language)
    providedCompile 'org.glassfish:jakarta.el:3.0.3'

    // JSON-P - API
    // artifact 'javax.json:javax.json-api:1.1.4' included in 'javax:javaee-web-api:8.0.1'
    //
    // JSON-P - RI
    testImplementation 'org.glassfish:jakarta.json:1.1.6'

    // JSON-B - API
    // artifact 'javax.json.bind:javax.json.bind-api:1.0' included in 'javax:javaee-web-api:8.0.1'
    //
    // JSON-B - RI
    testImplementation 'org.eclipse:yasson:1.0.6'
    // providedCompile 'org.eclipse:yasson:1.0.6' // if needed outside Test classes

    implementation 'org.bouncycastle:bcprov-jdk15on:1.66'
    implementation 'com.google.guava:guava:30.0-jre'
    annotationProcessor 'org.eclipse.persistence:org.eclipse.persistence.jpa.modelgen.processor:2.7.6'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
    testImplementation 'org.glassfish.jersey.inject:jersey-hk2:2.30'
    testImplementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3'
    testImplementation 'io.rest-assured:rest-assured:4.3.1'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'com.h2database:h2:1.4.196'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

test {
    useJUnitPlatform() // for junit5, but jersey test framework only works with junit4
    testLogging {
        // output is shown only once (coz gradle doesn't run them again if there is no change in code)
        // so use "./gradlew cleanTest test" to rerun the tests
        // also using "./gradlew test --tests NameOfTestClass" you can run only a single test class
        events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        exceptionFormat 'short' // available choices: short/full
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled false
        csv.enabled false
    }
}

sourceSets.main.output.resourcesDir = sourceSets.main.java.outputDir
compileJava.dependsOn(processResources)
sourceSets.main.java.srcDirs += 'build/generated/sources/annotationProcessor/java/main'

task startServer(type: Exec) {
    description = 'Starts Payara server.'
    workingDir asadminDir
    commandLine asadminFile

    args 'start-domain'
}

// NetBeans Debug -> Attach Debugger
//     debugger = Java Debugger JPDA
//     connector = SocketAttach
//     host = localhost
//     port = 9009
// this starts server in debug mode, i.e. run stopServer before running this
task debugServer(type: Exec) {
    description = 'Starts Payara server in debug mode.'
    workingDir asadminDir
    commandLine asadminFile

    args 'start-domain', '--debug'
}

task stopServer(type: Exec) {
    description = 'Stops Payara server.'
    workingDir asadminDir
    commandLine asadminFile

    args 'stop-domain'
}

task startDB(type: Exec) {
    description = 'Starts Payara database.'
    workingDir asadminDir
    commandLine asadminFile

    args 'start-database'
}

task stopDB(type: Exec) {
    description = 'Stops Payara database.'
    workingDir asadminDir
    commandLine asadminFile

    args 'stop-database'
}

task deploy(dependsOn: 'war', type: Exec) {
    description = 'Deploys WAR.'
    workingDir asadminDir
    commandLine asadminFile

    args 'deploy', "--contextroot=/", "--name=${rootProject.name}", "${war.archivePath}"
}

task redeploy(dependsOn: 'war', type: Exec) {
    description = 'Redeploys WAR.'
    workingDir asadminDir
    commandLine asadminFile

    args 'deploy', '--force=true', "--contextroot=/", "--name=${rootProject.name}", "${war.archivePath}"
}

task undeploy(type: Exec) {
    description = 'Undeploys WAR.'
    workingDir asadminDir
    commandLine asadminFile

    args 'undeploy', "${rootProject.name}"
}

task listApplications(type: Exec) {
    description = 'Lists applications deployed on Payara server.'
    workingDir asadminDir
    commandLine asadminFile

    args 'list-applications'
}

task h2console {
    doFirst {
        ext.process = new ProcessBuilder()
            .directory(new File(System.getenv('JAVA_HOME') + "${File.separator}bin"))
            .command("java", "-jar", "${h2jar}")
            .start()
    }
}

//spotbugs { // **spotbugs
//    toolVersion = '4.0.3'
//    ignoreFailures = true
//} // **spotbugs

//spotbugsMain { // **spotbugs
//    reports {
//        html {
//            enabled = true
//            stylesheet = 'fancy-hist.xsl'
//        }
//    }
//} // **spotbugs

//spotbugsTest { // **spotbugs
//    reports {
//        html {
//            enabled = true
//            stylesheet = 'fancy-hist.xsl'
//        }
//    }
//} // **spotbugs

pmd {
    toolVersion = '6.24.0'
    ignoreFailures = true
    ruleSets = [
        'category/java/bestpractices.xml',
        'category/java/codestyle.xml',
        'category/java/design.xml',
        'category/java/documentation.xml',
        'category/java/errorprone.xml',
        'category/java/multithreading.xml',
        'category/java/performance.xml',
        'category/java/security.xml',
        'rulesets/java/quickstart.xml'
    ]
}

pmdMain {
    reports {
        html.enabled true
        xml.enabled false
    }
}

pmdTest {
    reports {
        html.enabled true
        xml.enabled false
    }
}
